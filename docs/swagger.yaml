basePath: /api/v1
definitions:
  dto.ApplyLeaveRequest:
    properties:
      end_date:
        type: string
      leave_type:
        type: string
      reason:
        type: string
      start_date:
        type: string
    required:
    - end_date
    - leave_type
    - reason
    - start_date
    type: object
  dto.ApproveLeaveRequest:
    properties:
      approved:
        type: boolean
      remarks:
        type: string
    required:
    - approved
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.MarkAttendanceRequest:
    properties:
      date:
        type: string
      present:
        type: boolean
      student_id:
        type: integer
    required:
    - date
    - student_id
    type: object
  dto.RegisterRequest:
    properties:
      dept:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
host: localhost:8080
info:
  contact:
    email: support@attendance-workflow.com
    name: API Support
  description: API for managing attendance, leaves, and notifications in an educational
    institution
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Attendance Workflow API
  version: "1.0"
paths:
  /attendance/daily:
    get:
      consumes:
      - application/json
      description: Get attendance records for a specific date
      parameters:
      - description: Date (YYYY-MM-DD), defaults to today
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              date:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get daily attendance
      tags:
      - attendance
  /attendance/mark:
    post:
      consumes:
      - application/json
      description: Mark attendance for a student
      parameters:
      - description: Attendance data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MarkAttendanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "201":
          description: Created
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark attendance
      tags:
      - attendance
  /attendance/my:
    get:
      consumes:
      - application/json
      description: Get attendance records for the authenticated student
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              stats:
                type: object
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get my attendance
      tags:
      - attendance
  /attendance/student/{id}:
    get:
      consumes:
      - application/json
      description: Get attendance records for a specific student
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              stats:
                type: object
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get student attendance
      tags:
      - attendance
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and get authentication token
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /leaves:
    get:
      consumes:
      - application/json
      description: Get all leave requests (admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                format: int64
                type: integer
              total_pages:
                format: int64
                type: integer
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all leaves
      tags:
      - leaves
  /leaves/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a leave request (admin only)
      parameters:
      - description: Leave ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete leave
      tags:
      - leaves
  /leaves/{id}/approve:
    put:
      consumes:
      - application/json
      description: Approve or reject a leave request (admin/faculty/warden only)
      parameters:
      - description: Leave ID
        in: path
        name: id
        required: true
        type: integer
      - description: Approval decision
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ApproveLeaveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Approve or reject leave
      tags:
      - leaves
  /leaves/apply:
    post:
      consumes:
      - application/json
      description: Submit a leave request
      parameters:
      - description: Leave request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ApplyLeaveRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Apply for leave
      tags:
      - leaves
  /leaves/my:
    get:
      consumes:
      - application/json
      description: Get leave requests for the authenticated user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                format: int64
                type: integer
              total_pages:
                format: int64
                type: integer
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get my leaves
      tags:
      - leaves
  /leaves/pending:
    get:
      consumes:
      - application/json
      description: Get all pending leave requests (admin/faculty/warden only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                format: int64
                type: integer
              total_pages:
                format: int64
                type: integer
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get pending leaves
      tags:
      - leaves
  /users:
    get:
      consumes:
      - application/json
      description: Get paginated list of all users with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by department
        in: query
        name: dept
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                format: int64
                type: integer
              total_pages:
                format: int64
                type: integer
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: object
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
